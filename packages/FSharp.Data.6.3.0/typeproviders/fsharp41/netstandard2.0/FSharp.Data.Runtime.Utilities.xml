<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Data.Runtime.Utilities</name></assembly>
<members>
<member name="F:FSharp.Data.InferenceMode.ValuesAndInlineSchemasOverrides">
<summary>
 Inline schemas types override value infered types. (Value infered types are ignored if an inline schema is present)
</summary>
</member>
<member name="F:FSharp.Data.InferenceMode.ValuesAndInlineSchemasHints">
<summary>
 Inline schemas types have the same weight as value infered types.
</summary>
</member>
<member name="F:FSharp.Data.InferenceMode.ValuesOnly">
<summary>
 Infer types from values only. Inline schemas are disabled.
</summary>
</member>
<member name="F:FSharp.Data.InferenceMode.NoInference">
<summary>
 Type everything as strings
 (or the most basic type possible for the value when it&apos;s not string, e.g. for json numbers or booleans).
</summary>
</member>
<member name="F:FSharp.Data.InferenceMode.BackwardCompatible">
<summary>
 Used as a default value for backward compatibility with the legacy InferTypesFromValues boolean static parameter.
 The actual behaviour will depend on whether InferTypesFromValues is set to true (default) or false.
</summary>
</member>
<member name="T:FSharp.Data.InferenceMode">
<summary>
 This is the public inference mode enum used when initializing a type provider,
 with backward compatibility.
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultCurrencyAdorners@">
<summary>
 `¤` `$` `¢` `£` `¥` `₱` `﷼` `₤` `₭` `₦` `₨` `₩` `₮` `€` `฿` `₡` `៛` `؋` `₴` `₪` `₫` `₹` `ƒ`
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultNonCurrencyAdorners@">
<summary>
 `%` `‰` `‱`
</summary>
</member>
<member name="F:FSharp.Data.TextConversions.DefaultMissingValues@">
<summary>
 `NaN` `NA` `N/A` `#N/A` `:` `-` `TBA` `TBD`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultNonCurrencyAdorners">
<summary>
 `%` `‰` `‱`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultMissingValues">
<summary>
 `NaN` `NA` `N/A` `#N/A` `:` `-` `TBA` `TBD`
</summary>
</member>
<member name="P:FSharp.Data.TextConversions.DefaultCurrencyAdorners">
<summary>
 `¤` `$` `¢` `£` `¥` `₱` `﷼` `₤` `₭` `₦` `₨` `₩` `₮` `€` `฿` `₡` `៛` `؋` `₴` `₪` `₫` `₹` `ƒ`
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsString(System.String)">
<summary>
 Turns empty or null string value into None, otherwise returns Some
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsFloat(System.String[],System.Boolean,System.IFormatProvider,System.String)">
<summary>
 if useNoneForMissingValues is true, NAs are returned as None, otherwise Some Double.NaN is used
</summary>
</member>
<member name="M:FSharp.Data.TextConversions.AsDateTime(System.IFormatProvider,System.String)">
<summary>
 Parse date time using either the JSON milliseconds format or using ISO 8601
 that is, either `/Date(&lt;msec-since-1/1/1970&gt;)/` or something
 along the lines of `2013-01-28T00:37Z`
</summary>
</member>
<member name="T:FSharp.Data.TextConversions">
<summary>
 Conversions from string to string/int/int64/decimal/float/boolean/datetime/timespan/guid options
</summary>
</member>
<member name="M:FSharp.Data.Helpers.asOption``1(System.Boolean,``0)">
<summary>
 Convert the result of TryParse to option type
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.OptionToNullable``1(Microsoft.FSharp.Core.FSharpOption{``0})">
<summary>
 Turn an F# option type Option&lt;&apos;T&gt; containing a primitive
 value type into a .NET type Nullable&lt;&apos;T&gt;
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.NullableToOption``1(System.Nullable{``0})">
<summary>
 Turn a .NET type Nullable&lt;&apos;T&gt; to an F# option type Option&lt;&apos;T&gt;
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.GetNonOptionalValue``1(System.String,Microsoft.FSharp.Core.FSharpOption{``0},Microsoft.FSharp.Core.FSharpOption{System.String})">
<summary>
 Operation that extracts the value from an option and reports a meaningful error message when the value is not there
 For missing strings we return &quot;&quot;, and for missing doubles we return NaN
 For other types an error is thrown
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.GetCulture(System.String)">
<summary>
 Returns CultureInfo matching the specified culture string
 (or InvariantCulture if the argument is null or empty)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.TextRuntime.AsyncMap``2(Microsoft.FSharp.Control.FSharpAsync{``0},System.Func{``0,``1})">
<summary>
 Turn a sync operation into an async operation
</summary>
</member>
<member name="T:FSharp.Data.Runtime.TextRuntime">
<summary>
 Static helper methods called from the generated code for working with text
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.UriResolver.Resolve(System.Uri)">
<summary>
 Resolve the absolute location of a file (or web URL) according to the rules
 used by standard F# type providers as described here:
 https://github.com/fsharp/fsharpx/issues/195#issuecomment-12141785

  * if it is web resource, just return it
  * if it is full path, just return it
  * otherwise.

    At design-time:
      * if the user specified resolution folder, use that
      * otherwise use the default resolution folder
    At run-time:
      * if the user specified resolution folder, use that
      * if it is running in F# interactive (config.IsHostedExecution)
        use the default resolution folder
      * otherwise, use &apos;CurrentDomain.BaseDirectory&apos;
 returns an absolute uri * isWeb flag
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntimeWithDesignTimeRules(System.String,System.String,System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the designtime resolution rules
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncReadTextAtRuntime(System.Boolean,System.String,System.String,System.String,System.String,System.String)">
<summary>
 Returns a TextReader for the uri using the runtime resolution rules
</summary>
</member>
<member name="M:FSharp.Data.Runtime.IO.asyncRead(FSharp.Data.Runtime.IO.UriResolver,System.String,System.String,System.Uri)">
<summary>
 Opens a stream to the uri using the uriResolver resolution rules
 It the uri is a file, uses shared read, so it works when the file locked by Excel or similar tools,
 and sets up a filesystem watcher that calls the invalidate function whenever the file changes
</summary>
</member>
<member name="T:FSharp.Data.Runtime.IO">
<summary>
 Helper functions called from the generated code for working with files
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.singularize(System.String)">
<summary>
 Return the singular of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.pluralize(System.String)">
<summary>
 Return the plural of an English word
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.trimHtml(System.String)">
<summary>
 Trim HTML tags from a given string and replace all of them with spaces
 Multiple tags are replaced with just a single space. (This is a recursive
 implementation that is somewhat faster than regular expression.)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.uniqueGenerator(Microsoft.FSharp.Core.FSharpFunc{System.String,System.String})">
<summary>
 Given a function to format names (such as &apos;niceCamelName&apos; or &apos;nicePascalName&apos;)
 returns a name generator that never returns duplicate name (by appending an
 index to already used names)

 This function is curried and should be used with partial function application:

     let makeUnique = uniqueGenerator nicePascalName
     let n1 = makeUnique &quot;sample-name&quot;
     let n2 = makeUnique &quot;sample-name&quot;

</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.niceCamelName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;camelCase&apos; identifier
</summary>
</member>
<member name="M:FSharp.Data.Runtime.NameUtils.nicePascalName(System.String)">
<summary>
 Turns a given non-empty string into a nice &apos;PascalCase&apos; identifier
</summary>
</member>
<member name="T:FSharp.Data.Runtime.NameUtils">
<summary>
 Tools for generating nice member names that follow F# &amp; .NET naming conventions
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.createInternetFileCache(System.String,System.TimeSpan)">
<summary>
 Creates a cache that stores data in a local file system
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.hashString(System.String)">
<summary>
 Get hash code of a string - used to determine cache file
</summary>
</member>
<member name="M:FSharp.Data.Runtime.Caching.createInMemoryCache``2(System.TimeSpan)">
<summary>
 Creates a cache that uses in-memory collection
</summary>
</member>
<member name="T:FSharp.Data.Runtime.Caching">
<summary>
 Implements caching using in-memory and local file system
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.PrimitiveInferedProperty">
<summary>
 Represents type information about a primitive property (used mainly in the CSV provider)
 This type captures the type, unit of measure and handling of missing values (if we
 infer that the value may be missing, we can generate option&lt;T&gt; or nullable&lt;T&gt;)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.PrimitiveInferedValue">
<summary>
 Represents type information about a primitive value (used mainly in the CSV provider)
 This type captures the type, unit of measure and handling of missing values (if we
 infer that the value may be missing, we can generate option&lt;T&gt; or nullable&lt;T&gt;)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.Nullable">
<summary>
 The type T will be converter to type Nullable&lt;T&gt;
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.Option">
<summary>
 The type T will be converter to type T option
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper.None">
<summary>
 No transformation will be made to the type
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.TypeWrapper">
<summary>
 Represents a transformation of a type
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit">
<summary>
 Dummy type to represent that only one of &quot;0&quot; and &quot;1&quot; were found
 Will be generated as a &apos;bool&apos;, unless it&apos;s converted to another numerical type
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit1">
<summary>
 Dummy type to represent that only &quot;1&quot; was found
 Will be generated as &apos;int&apos;, unless it&apos;s converted to Bit
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.Bit0">
<summary>
 Dummy type to represent that only &quot;0&quot; was found.
 Will be generated as &apos;int&apos;, unless it&apos;s converted to Bit.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralTypes.InferedType.EnsuresHandlesMissingValues(System.Boolean)">
<summary>
 When allowEmptyValues is true, we allow &quot;&quot; and double.NaN, otherwise
 we make the type optional and use None instead.
 It&apos;s currently only true in CsvProvider when PreferOptionals is set to false
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedType">
<summary>
 Represents inferred structural type. A type may be either primitive type
 (one of those listed by `primitiveTypes`) or it can be collection,
 (named) record and heterogeneous type. We also have `Null` type (which is
 a subtype of all non-primitive types) and universal `Top` type.

  * For collection, we infer the types of different things that appear in
    the collection and how many times they do.

  * A heterogeneous type (sum type) is simply a choice containing one
    of multiple different possibilities

 Why is collection not simply a list of Heterogeneous types? If we used that
 we would lose information about multiplicity and so we would not be able
 to generate nicer types!
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag.Json">
<summary>
 Allow for support of embedded json in e.g. xml documents
</summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag.Code">
<summary>
 Converts tag to string code that can be passed to generated code
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag.ParseCode(System.String)">
<summary>
 Parses code returned by &apos;Code&apos; member (to be used in provided code)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedTypeTag">
<summary>
 For heterogeneous types, this represents the tag that defines the form
 (that is either primitive type, collection, named record etc.)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity">
<summary>
 For heterogeneous types (types that have multiple possible forms
 such as differently named XML nodes or records and arrays mixed together)
 this type represents the number of occurrences of individual forms
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralTypes.InferedProperty">
 <summary>A property of a record has a name and type and may be optional</summary>
 <namespacedoc>
   <summary>Types that represent the result of static type inference.</summary>
 </namespacedoc>
</member>
<member name="T:FSharp.Data.Runtime.StructuralInference.InferenceMode'.ValuesOnly">
<summary>
 Backward compatible mode.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.InferenceMode'.FromPublicApi(FSharp.Data.InferenceMode,Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
<summary>
 Converts from the public api enum with backward compat to the internal representation with only valid cases.
 If the user sets InferenceMode manually (to a value other than BackwardCompatible)
 then the legacy InferTypesFromValues is ignored.
 Otherwise (when set to BackwardCompatible), inference mode is set to a compatible value.
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralInference.InferenceMode'">
<summary>
 This is the internal DU representing all the valid cases we support, mapped from the public InferenceMode.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.getInferedTypeFromString(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Infers the type of a simple string value
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.inferPrimitiveType(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.String,Microsoft.FSharp.Core.FSharpOption{System.Type})">
<summary>
 Infers the type of a string value
 Returns one of null|typeof&lt;Bit0&gt;|typeof&lt;Bit1&gt;|typeof&lt;bool&gt;|typeof&lt;int&gt;|typeof&lt;int64&gt;|typeof&lt;decimal&gt;|typeof&lt;float&gt;|typeof&lt;Guid&gt;|typeof&lt;DateTime&gt;|typeof&lt;TimeSpan&gt;|typeof&lt;string&gt;
 with the desiredUnit applied,
 or a value parsed from an inline schema.
 (For inline schemas, the unit parsed from the schema takes precedence over desiredUnit when present)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.parseTypeAndUnit(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,System.Collections.Generic.IDictionary{System.String,System.Tuple{System.Type,FSharp.Data.Runtime.StructuralTypes.TypeWrapper}},System.String)">
 <summary>
 Parses type specification in the schema for a single value.
 This can be of the form: <c>type|measure|type&lt;measure&gt;</c>
 type{measure} is also supported to ease definition in xml values.
 </summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.validInlineSchema">
<summary>
 Matches a value of the form &quot;typeof&lt;value&gt;&quot; where the nested value is of the form &quot;type&lt;unit&gt;&quot; or just &quot;type&quot;.
 ({} instead of &lt;&gt; is allowed so it can be used in xml)
</summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.nameToType">
<summary>
 The inferred types may be set explicitly via inline schemas.
 This table specifies the mapping from (the names that users can use) to (the types used).
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.inferCollectionType(System.Boolean,System.Collections.Generic.IEnumerable{FSharp.Data.Runtime.StructuralTypes.InferedType})">
<summary>
 Infer the type of the collection based on multiple sample types
 (group the types by tag, count their multiplicity)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionRecordTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpList{FSharp.Data.Runtime.StructuralTypes.InferedProperty},Microsoft.FSharp.Collections.FSharpList{FSharp.Data.Runtime.StructuralTypes.InferedProperty})">
<summary>
 Get the union of record types (merge their properties)
 This matches the corresponding members and marks them as `Optional`
 if one may be missing. It also returns subtype of their types.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionCollectionTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,System.Tuple{FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity,FSharp.Data.Runtime.StructuralTypes.InferedType}},Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,System.Tuple{FSharp.Data.Runtime.StructuralTypes.InferedMultiplicity,FSharp.Data.Runtime.StructuralTypes.InferedType}})">
<summary>
 A collection can contain multiple types - in that case, we do keep
 the multiplicity for each different type tag to generate better types
 (this is essentially the same as `unionHeterogeneousTypes`, but
 it also handles the multiplicity)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.unionHeterogeneousTypes(System.Boolean,Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,FSharp.Data.Runtime.StructuralTypes.InferedType},Microsoft.FSharp.Collections.FSharpMap{FSharp.Data.Runtime.StructuralTypes.InferedTypeTag,FSharp.Data.Runtime.StructuralTypes.InferedType})">
<summary>
 Given two heterogeneous types, get a single type that can represent all the
 types that the two heterogeneous types can.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.subtypeInfered(System.Boolean,FSharp.Data.Runtime.StructuralTypes.InferedType,FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Find common subtype of two infered types:

  * If the types are both primitive, then we find common subtype of the primitive types
  * If the types are both records, then we union their fields (and mark some as optional)
  * If the types are both collections, then we take subtype of their elements
    (note we do not generate heterogeneous types in this case!)
  * If one type is the Top type, then we return the other without checking
  * If one of the types is the Null type and the other is not a value type
    (numbers or booleans, but not string) then we return the other type.
    Otherwise, we return bottom.

 The contract that should hold about the function is that given two types with the
 same `InferedTypeTag`, the result also has the same `InferedTypeTag`.

</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.|SubtypePrimitives|_|(System.Boolean,FSharp.Data.Runtime.StructuralTypes.InferedType,FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Active pattern that calls `subtypePrimitives` on two primitive types
</summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.conversionTable">
<summary>
 Find common subtype of two primitive types or `Bottom` if there is no such type.
 The numeric types are ordered as below, other types are not related in any way.

   float :&gt; decimal :&gt; int64 :&gt; int :&gt; bit :&gt; bit0
   float :&gt; decimal :&gt; int64 :&gt; int :&gt; bit :&gt; bit1
   bool :&gt; bit :&gt; bit0
   bool :&gt; bit :&gt; bit1

 This means that e.g. `int` is a subtype of `decimal` and so all `int` values
 are also `decimal` (and `float`) values, but not the other way round.
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.typeTag(FSharp.Data.Runtime.StructuralTypes.InferedType)">
<summary>
 Returns a tag of a type - a tag represents a &apos;kind&apos; of type
 (essentially it describes the different bottom types we have)
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.supportsUnitsOfMeasure(System.Type)">
<summary>
 Checks whether a type supports unit of measure
</summary>
</member>
<member name="P:FSharp.Data.Runtime.StructuralInference.primitiveTypes">
<summary>
 List of primitive types that can be returned as a result of the inference
</summary>
</member>
<member name="M:FSharp.Data.Runtime.StructuralInference.List.pairBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
<summary>
 Merge two sequences by pairing elements for which
 the specified predicate returns the same key

 (If the inputs contain the same keys, then the order
 of the elements is preserved.)
</summary>
</member>
<member name="T:FSharp.Data.Runtime.StructuralInference.List">
 <exclude />
</member>
<member name="T:FSharp.Data.Runtime.StructuralInference">
<summary>
 Implements type inference for unstructured documents like XML or JSON
</summary>
</member>
</members>
</doc>
