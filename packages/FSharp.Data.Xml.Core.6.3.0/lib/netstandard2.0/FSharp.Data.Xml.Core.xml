<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSharp.Data.Xml.Core</name></assembly>
<members>
<member name="M:ProviderImplementation.XmlInference.inferType(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.Boolean,System.Boolean,System.Xml.Linq.XElement[])">
<summary>
 A type is infered either using `inferLocalType` which only looks
 at immediate children or using `inferGlobalType` which unifies nodes
 of the same name in the entire document
</summary>
</member>
<member name="M:ProviderImplementation.XmlInference.inferLocalType(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.Boolean,System.Xml.Linq.XElement)">
<summary>
 Get information about type locally (the type of children is infered
 recursively, so same elements in different positions have different types)
</summary>
</member>
<member name="M:ProviderImplementation.XmlInference.inferGlobalType(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.Boolean,System.Xml.Linq.XElement[])">
<summary>
 Infers type for the element, unifying nodes of the same name
 across the entire document (we first get information based
 on just attributes and then use a fixed point)
</summary>
</member>
<member name="M:ProviderImplementation.XmlInference.getAttributes(FSharp.Data.Runtime.StructuralInference.IUnitsOfMeasureProvider,FSharp.Data.Runtime.StructuralInference.InferenceMode',System.Globalization.CultureInfo,System.Xml.Linq.XElement)">
<summary>
 Generates record fields for all attributes
</summary>
</member>
<member name="M:ProviderImplementation.XmlInference.|EmptyMap|_|``3(``0,Microsoft.FSharp.Collections.FSharpMap{``1,``2})">
<summary>
 Takes a map and succeeds if it is empty
</summary>
</member>
<member name="T:ProviderImplementation.XsdInference">
<summary>
 Element definitions in a schema are mapped to InferedType instances
</summary>
</member>
<member name="T:ProviderImplementation.XsdParsing">
<summary>
 A simplified schema model is built from xsd.
 The actual parsing is done using BCL classes.
</summary>
</member>
<member name="T:ProviderImplementation.XsdModel">
<summary>
 Simplified model to represent schemas (XSD).
</summary>
</member>
<member name="M:FSharp.Data.Runtime.XmlRuntime.TryGetJsonValue(FSharp.Data.Runtime.BaseTypes.XmlElement)">
<summary>
 Tries to return the contents of the element as a JsonValue
</summary>
</member>
<member name="M:FSharp.Data.Runtime.XmlRuntime.GetJsonValue(FSharp.Data.Runtime.BaseTypes.XmlElement)">
<summary>
 Returns the contents of the element as a JsonValue
</summary>
</member>
<member name="M:FSharp.Data.Runtime.XmlRuntime.CreateValue(System.String,System.Object,System.String)">
<summary>
 Creates a XElement with a scalar value and wraps it in a XmlElement
</summary>
</member>
<member name="M:FSharp.Data.Runtime.XmlRuntime.ConvertAsName``1(FSharp.Data.Runtime.BaseTypes.XmlElement,System.String,System.Func{FSharp.Data.Runtime.BaseTypes.XmlElement,``0})">
<summary>
 Returns Some if the specified XmlElement has the specified name
 (otherwise None is returned). This is used when the current element
 can be one of multiple elements.
</summary>
</member>
<member name="T:FSharp.Data.Runtime.XmlRuntime">
<summary>
 Static helper methods called from the generated code for working with XML
</summary>
</member>
<member name="T:FSharp.Data.Runtime.XmlSchema.ResolutionFolderResolver">
<summary>
 A custom XmlResolver is needed for included files because we get the contents of the main file
 directly as a string from the FSharp.Data infrastructure. Hence the default XmlResolver is not
 able to find the location of included schema files.
</summary>
</member>
<member name="P:FSharp.Data.Runtime.BaseTypes.XmlElement._Print">
 <exclude />
</member>
<member name="M:FSharp.Data.Runtime.BaseTypes.XmlElement.ToString">
 <exclude />
</member>
<member name="M:FSharp.Data.Runtime.BaseTypes.XmlElement.CreateList(System.IO.TextReader)">
 <exclude />
</member>
<member name="M:FSharp.Data.Runtime.BaseTypes.XmlElement.Create(System.IO.TextReader)">
 <exclude />
</member>
<member name="M:FSharp.Data.Runtime.BaseTypes.XmlElement.Create(System.Xml.Linq.XElement)">
 <exclude />
</member>
<member name="T:FSharp.Data.Runtime.BaseTypes.XmlElement">
<summary>
 Underlying representation of types generated by XmlProvider
</summary>
</member>
<member name="M:FSharp.Data.XElementExtensions.XElement.RequestAsync(System.Xml.Linq.XElement,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}})">
<summary>
 Sends the XML to the specified uri. Defaults to a POST request.
</summary>
</member>
<member name="M:FSharp.Data.XElementExtensions.XElement.Request(System.Xml.Linq.XElement,System.String,Microsoft.FSharp.Core.FSharpOption{System.String},Microsoft.FSharp.Core.FSharpOption{System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}}})">
<summary>
 Sends the XML to the specified uri. Defaults to a POST request.
</summary>
</member>
</members>
</doc>
